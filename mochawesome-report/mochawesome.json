{
  "stats": {
    "suites": 7,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-11T07:22:20.415Z",
    "end": "2022-08-11T07:22:20.919Z",
    "duration": 504,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8cade568-bec3-4396-ac85-229d8e5cfa85",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 60,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "try{\n    await mongoose.connect('mongodb://localhost/users_test');\n}catch(e){\n    console.warn('Warning', e);\n    }",
          "err": {},
          "uuid": "ad266cf7-2435-4508-b34d-58b2ad2a9c7b",
          "parentUUID": "8cade568-bec3-4396-ac85-229d8e5cfa85",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ec47091f-049f-4859-a4b1-fdef002822ed",
          "title": "Association tests",
          "fullFile": "D:\\learn-mongo\\test\\association_test.js",
          "file": "\\test\\association_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Association tests\"",
              "fullTitle": "Association tests \"before all\" hook in \"Association tests\"",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{\n    const {users,blogposts,comments} = mongoose.connection.collections;\n    let user_drop =  users.drop();\n    let blogposts_drop =  blogposts.drop();\n    let comments_drop =  comments.drop();\n    await Promise.all([user_drop,blogposts_drop,comments_drop]);\n    console.log(\"Dropping users, blogPosts, comments  collections\");\n}catch(e){\n}",
              "err": {},
              "uuid": "b8efa7e5-37f5-4f61-8f12-b56644634f22",
              "parentUUID": "ec47091f-049f-4859-a4b1-fdef002822ed",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Association tests\"",
              "fullTitle": "Association tests \"before each\" hook in \"Association tests\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "joe = new User({name: \"Joe\"});\nblogPost = new BlogPost({title: 'JS is great!', content:'Yes it is'});\ncomment = new Comment({content: 'Congrats on a great post'});\njoe.blogPosts.push(blogPost);\nblogPost.comments.push(comment);\ncomment.user = joe;\nlet joe_save = joe.save();\nlet blog_save = blogPost.save();\nlet comment_save = comment.save();\nawait Promise.all([joe_save,blog_save,comment_save]);",
              "err": {},
              "uuid": "0a32d337-9b92-40dd-b4d7-7b56886b54f1",
              "parentUUID": "ec47091f-049f-4859-a4b1-fdef002822ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "finds a user and related blogPosts ",
              "fullTitle": "Association tests finds a user and related blogPosts ",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let user = await User.findById(joe._id.toString()).populate('blogPosts');\nassert(user.blogPosts[0].title === 'JS is great!')",
              "err": {},
              "uuid": "fd3d1042-7916-4862-ad95-20dcc1bbf0f8",
              "parentUUID": "ec47091f-049f-4859-a4b1-fdef002822ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Finds the complete related objects of a user",
              "fullTitle": "Association tests Finds the complete related objects of a user",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let user = await User.findById(joe._id.toString()).populate({\n    path: 'blogPosts',\n    populate: {\n        path: 'comments',\n        model: Comment,\n\n    }\n});",
              "err": {},
              "uuid": "9d3059c1-552b-45f6-ab09-3c4a7917ed2d",
              "parentUUID": "ec47091f-049f-4859-a4b1-fdef002822ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd3d1042-7916-4862-ad95-20dcc1bbf0f8",
            "9d3059c1-552b-45f6-ab09-3c4a7917ed2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3a15e0f-47ed-482a-a683-b4c20e3d0f38",
          "title": "Tests for creating a new user",
          "fullFile": "D:\\learn-mongo\\test\\create_test.js",
          "file": "\\test\\create_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for creating a new user\"",
              "fullTitle": "Tests for creating a new user \"before all\" hook in \"Tests for creating a new user\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collections.users.drop();\nconsole.log(\"Dropping the users collection\");",
              "err": {},
              "uuid": "1ece8570-336d-473f-92cc-612b7ac4d3b9",
              "parentUUID": "e3a15e0f-47ed-482a-a683-b4c20e3d0f38",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "saves a user",
              "fullTitle": "Tests for creating a new user saves a user",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const joe = new User({name: 'Joe'});\nawait joe.save(); // save provides with a promise.\nassert(!joe.isNew);",
              "err": {},
              "uuid": "7a3d93da-f6fc-4a8e-b3ba-dac20d846cb3",
              "parentUUID": "e3a15e0f-47ed-482a-a683-b4c20e3d0f38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a3d93da-f6fc-4a8e-b3ba-dac20d846cb3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "069f5455-0810-49dd-b5f4-515b622000f0",
          "title": "Tests to check out the functionality of read operations of mongoose",
          "fullFile": "D:\\learn-mongo\\test\\read_test.js",
          "file": "\\test\\read_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests to check out the functionality of read operations of mongoose\"",
              "fullTitle": "Tests to check out the functionality of read operations of mongoose \"before all\" hook in \"Tests to check out the functionality of read operations of mongoose\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collections.users.drop();\nconsole.log(\"Dropping the users collection\");",
              "err": {},
              "uuid": "be882727-e987-4903-b8a2-c5f7fa2c0b65",
              "parentUUID": "069f5455-0810-49dd-b5f4-515b622000f0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: create a new user in \"Tests to check out the functionality of read operations of mongoose\"",
              "fullTitle": "Tests to check out the functionality of read operations of mongoose \"before each\" hook: create a new user in \"Tests to check out the functionality of read operations of mongoose\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "joe = new User({name: 'Joe', count: ++count});\nawait joe.save();",
              "err": {},
              "uuid": "0d77c909-37ab-408b-b9e2-a6de2704232a",
              "parentUUID": "069f5455-0810-49dd-b5f4-515b622000f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Use findOne",
              "fullTitle": "Tests to check out the functionality of read operations of mongoose Use findOne",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let {name} = await User.findOne({name: \"Joe\"});\nassert(joe.name === name);",
              "err": {},
              "uuid": "54877f51-7649-4f3a-8a61-2310adbdcd9c",
              "parentUUID": "069f5455-0810-49dd-b5f4-515b622000f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use find",
              "fullTitle": "Tests to check out the functionality of read operations of mongoose Use find",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let users = await User.find({name:\"Joe\"});\nusers.forEach((user) => assert(user.name === \"Joe\"));",
              "err": {},
              "uuid": "18442a1a-4fe7-47bb-8b71-7b7855e49512",
              "parentUUID": "069f5455-0810-49dd-b5f4-515b622000f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Find by Id",
              "fullTitle": "Tests to check out the functionality of read operations of mongoose Find by Id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let id = joe._id ;\nlet user = await User.findById(id);\nassert(id.toString() === user._id.toString());",
              "err": {},
              "uuid": "d7e4daa9-b3d4-4e5a-a20a-018607cf4ecd",
              "parentUUID": "069f5455-0810-49dd-b5f4-515b622000f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54877f51-7649-4f3a-8a61-2310adbdcd9c",
            "18442a1a-4fe7-47bb-8b71-7b7855e49512",
            "d7e4daa9-b3d4-4e5a-a20a-018607cf4ecd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa16ef3d-a7df-4523-91d4-2627a3dfbaad",
          "title": "Tests for subdocuments",
          "fullFile": "D:\\learn-mongo\\test\\subdocument_test.js",
          "file": "\\test\\subdocument_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Able to create a subdocument",
              "fullTitle": "Tests for subdocuments Able to create a subdocument",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let user = new User({name: \"Joe\", posts: [{title: \"New Post\"}]});\nawait user.save();\nlet {posts: [{title}]} = await User.findById(user._id.toString()).exec();\nassert(title === \"New Post\");",
              "err": {},
              "uuid": "9d17ae7c-04ef-45f6-9cdf-c25b1d3a845d",
              "parentUUID": "aa16ef3d-a7df-4523-91d4-2627a3dfbaad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to add new subdocuments",
              "fullTitle": "Tests for subdocuments Able to add new subdocuments",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let joe = await new User({name: \"Joe\", posts: []}).save();\nlet user = await User.findById(joe._id.toString());\nassert(user.posts.length === 0);\njoe.posts.push({title: 'This too a new post'});\nawait joe.save();\nuser = await User.findById(joe._id.toString());\nassert(user.posts[0].title === 'This too a new post');",
              "err": {},
              "uuid": "8524cd5f-cbb2-4a38-a9c9-98147ed3c551",
              "parentUUID": "aa16ef3d-a7df-4523-91d4-2627a3dfbaad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to remove specific documents",
              "fullTitle": "Tests for subdocuments Able to remove specific documents",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let joe = await new User({name: \"Joe\", posts: [{title: \"Yet Another post\"}]}).save();\nlet user = await User.findById(joe._id.toString());\nassert(user.posts.length === 1);\njoe.posts[0].remove();\nawait joe.save();\nuser = await User.findById(joe._id.toString());\nassert(user.posts.length === 0);",
              "err": {},
              "uuid": "ed8732b3-1eb9-46a8-8206-82dbfe5f57d9",
              "parentUUID": "aa16ef3d-a7df-4523-91d4-2627a3dfbaad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d17ae7c-04ef-45f6-9cdf-c25b1d3a845d",
            "8524cd5f-cbb2-4a38-a9c9-98147ed3c551",
            "ed8732b3-1eb9-46a8-8206-82dbfe5f57d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
          "title": "Tests for updating mongo documents",
          "fullFile": "D:\\learn-mongo\\test\\update_test.js",
          "file": "\\test\\update_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for updating mongo documents\"",
              "fullTitle": "Tests for updating mongo documents \"before all\" hook in \"Tests for updating mongo documents\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collections.users.drop();\nconsole.log(\"Dropping the users collection\");",
              "err": {},
              "uuid": "471930aa-c25d-42e0-8341-e2f64a1b19c5",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: create a new user in \"Tests for updating mongo documents\"",
              "fullTitle": "Tests for updating mongo documents \"before each\" hook: create a new user in \"Tests for updating mongo documents\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "joe = new User({name: 'Joe', likes: count});\nawait joe.save();",
              "err": {},
              "uuid": "c321c625-e668-4119-97ba-a04b282cd775",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Update using the model instance",
              "fullTitle": "Tests for updating mongo documents Update using the model instance",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "joe.name = \"Joey\";\nawait joe.save();\nassert(joe.name === \"Joey\");",
              "err": {},
              "uuid": "4e5f5c53-72fc-4db1-aa94-c2592261db1a",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update by set n save",
              "fullTitle": "Tests for updating mongo documents Update by set n save",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "joe.set('name','alex');\nlet {name} = await User.findById(joe._id.toString());\nassert(name !== joe.name);\nawait joe.save();\nlet {\n    name: newName\n} = await User.findById(joe._id.toString());\nassert(newName === 'alex');",
              "err": {},
              "uuid": "0538068b-fa55-4d1c-a0f8-9ebb17063119",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update by model instance update",
              "fullTitle": "Tests for updating mongo documents Update by model instance update",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await joe.updateOne({name: 'Alex'}).exec();\nlet {name} = await User.findById(joe._id.toString());\nassert(name === 'Alex');",
              "err": {},
              "uuid": "1667c7e6-9204-4ede-b5ca-d976667bf895",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update by Model.findByIdAndUpdate()",
              "fullTitle": "Tests for updating mongo documents Update by Model.findByIdAndUpdate()",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let {name} = await User.findByIdAndUpdate(joe._id,{name: 'Alex'},{new: true});\nassert(name === 'Alex');",
              "err": {},
              "uuid": "4004b2f8-2083-4f41-a51f-d7c9b219f20d",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update by findOneAndUpdate",
              "fullTitle": "Tests for updating mongo documents Update by findOneAndUpdate",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let {name} = await User.findOneAndUpdate({name: \"Joe\"},{name: \"Alex\"},{new: true}).exec();\nassert(name === 'Alex');",
              "err": {},
              "uuid": "fe22ec9a-cc24-448f-a811-4492b9f78932",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update by updateMany",
              "fullTitle": "Tests for updating mongo documents Update by updateMany",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = await User.updateMany({name:\"Joe\"},{name:\"Joey\"},{new: true}).exec();\nlet users = await User.find({name: \"Joe\"});\nassert(users.length === 0);",
              "err": {},
              "uuid": "0ec3f8cc-be41-43b1-a111-7e0c27d27656",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update using $inc operator",
              "fullTitle": "Tests for updating mongo documents Update using $inc operator",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let {likes} = await User.findOneAndUpdate({name:'Joe'},{$inc : {likes: 1}},{new: true}).exec();\nassert(likes=== 1);",
              "err": {},
              "uuid": "8c4f6625-f60c-45c0-beee-8e84da125586",
              "parentUUID": "abd0a3a5-65a9-457d-84c8-c139c4ef2685",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e5f5c53-72fc-4db1-aa94-c2592261db1a",
            "0538068b-fa55-4d1c-a0f8-9ebb17063119",
            "1667c7e6-9204-4ede-b5ca-d976667bf895",
            "4004b2f8-2083-4f41-a51f-d7c9b219f20d",
            "fe22ec9a-cc24-448f-a811-4492b9f78932",
            "0ec3f8cc-be41-43b1-a111-7e0c27d27656",
            "8c4f6625-f60c-45c0-beee-8e84da125586"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a977a9c7-b243-4410-a80c-4f8874616d18",
          "title": "Validating records",
          "fullFile": "D:\\learn-mongo\\test\\validation_test.js",
          "file": "\\test\\validation_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Requires a user name",
              "fullTitle": "Validating records Requires a user name",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = new User({name: undefined});\nconst {errors:{name: {message}}} = user.validateSync();\nassert(message === 'Name is required.');",
              "err": {},
              "uuid": "64cc4fec-3bf2-433e-a69f-b55664d2d577",
              "parentUUID": "a977a9c7-b243-4410-a80c-4f8874616d18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Requires a user's name longer than 2 characters",
              "fullTitle": "Validating records Requires a user's name longer than 2 characters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = new User({name: \"Jo\"});\nconst {errors:{name:{message}}} = user.validateSync();\nassert(message === 'Name must be longer than 2 characters.');",
              "err": {},
              "uuid": "9f3f2f0b-0db3-4e43-9255-0edac505e9cb",
              "parentUUID": "a977a9c7-b243-4410-a80c-4f8874616d18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Disallows invalid records from being saved",
              "fullTitle": "Validating records Disallows invalid records from being saved",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = new User({name: 'Al'});\ntry{\n    await user.save();\n}catch({errors:{name:{message}}}){\n    assert(message === 'Name must be longer than 2 characters.');\n}",
              "err": {},
              "uuid": "62da7818-04f6-445f-ba2a-2538e215d732",
              "parentUUID": "a977a9c7-b243-4410-a80c-4f8874616d18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64cc4fec-3bf2-433e-a69f-b55664d2d577",
            "9f3f2f0b-0db3-4e43-9255-0edac505e9cb",
            "62da7818-04f6-445f-ba2a-2538e215d732"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fcee6a6c-1412-4be8-b15d-edb696044826",
          "title": "Virtual types tests",
          "fullFile": "D:\\learn-mongo\\test\\virtual_type_test.js",
          "file": "\\test\\virtual_type_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Virtual type is getting correct data",
              "fullTitle": "Virtual types tests Virtual type is getting correct data",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let joe = await new User({name:\"Joe\", posts:[{title: \"PostIt\"}]}).save();\n        let user = await User.findById(joe._id.toString());\n        assert(user.postCount === 1);",
              "err": {},
              "uuid": "9d336f15-02db-41e7-a030-cec5781251aa",
              "parentUUID": "fcee6a6c-1412-4be8-b15d-edb696044826",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d336f15-02db-41e7-a030-cec5781251aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}